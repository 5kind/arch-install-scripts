#!/bin/bash

shopt -s extglob

m4_include(common)

write_source() {
  local src=$1 tag= spec= label= uuid= comment=()

  label=$(blkid -s LABEL -o value "$1" 2>/dev/null)
  uuid=$(blkid -s UUID -o value "$1" 2>/dev/null)

  if (( bylabel )); then
    tag=LABEL
    spec=$label
    comment=("$src" "UUID=$uuid")
  elif (( byuuid )); then
    tag=UUID
    spec=$uuid
    comment=("$src")
    if [[ $label ]]; then
      comment+=("LABEL=$label")
    fi
  else
    [[ $uuid ]] && comment+=("UUID=$uuid")
    [[ $label ]] && comment+=("LABEL=$label")
  fi

  [[ $comment ]] && printf '# %s\n' "${comment[*]}"

  if [[ $spec ]]; then
    printf '%-20s' "$tag=$spec"
  else
    printf '%-20s' "$(mangle "$src")"
  fi
}

usage() {
  cat <<EOF
usage: ${0##*/} root [options]

  Options:
    -L             Use labels for source identifiers
    -p             Avoid printing pseudofs mounts
    -U             Use UUIDs for source identifiers

genfstab generates output suitable for addition to an fstab file based on the
devices mounted under the mountpoint specified by the given root.

EOF
}

if [[ -z $1 || $1 = @(-h|--help) ]]; then
  usage
  exit $(( $# ? 0 : 1 ))
fi

while getopts ':LpU' flag; do
  case $flag in
    L)
      bylabel=1
      ;;
    U)
      byuuid=1
      ;;
    p)
      nopseudofs=1
      ;;
    :)
      die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
    ?)
      die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

(( $# )) || die "No root directory specified"
root=$1; shift

if ! mountpoint -q "$root"; then
  die "$root is not a mountpoint"
fi

if (( bylabel && byuuid )); then
  die "cannot specify both -U and -L"
fi

# handle block devices
findmnt -Recruno SOURCE,TARGET,FSTYPE,OPTIONS "$root" |
    while read -r source target fstype opts; do
  # default 5th and 6th columns
  dump=0 pass=2

  source=$(unmangle "$source")
  target=$(unmangle "$target")

  # this is root
  target=${target#$root}
  if [[ $target = ?(/) ]]; then
    target=/
    pass=1
  fi

  # we don't fsck pseudofs
  if fstype_is_pseudofs "$fstype"; then
    (( nopseudofs )) && continue
    pass=0
  fi

  if [[ $source =~ ^(/.+)\[(.+)\]$ ]]; then
    if [[ $fstype = btrfs ]]; then
      source=${BASH_REMATCH[1]}
      opts+=,subvol=${BASH_REMATCH[2]#/}
    else
      # it's a bind mount
      source=$(findmnt -funcevo TARGET "${BASH_REMATCH[1]}")${BASH_REMATCH[2]}
      fstype=bind
      pass=0
    fi
  fi

  # write one line
  write_source "$source"
  printf '\t%-10s' "$(mangle "$target")" "$fstype" "$opts"
  printf '\t%s %s' "$dump" "$pass"
  printf '\n\n'
done

# handle swaps devices
{
  # ignore header
  read

  while read -r device type _ _ prio; do
    options=defaults
    if [[ $prio != -1 ]]; then
      options+=,pri=$prio
    fi

    if [[ $type = file ]]; then
      printf '%-20s' "$device"
    else
      write_source "$(unmangle "$device")"
    fi

    printf '\t%-10s\t%-10s\t%-10s\t0 0\n\n' 'none' 'swap' "$options"
  done
} </proc/swaps

# vim: et ts=2 sw=2 ft=sh:
