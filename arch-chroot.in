#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only

shopt -s extglob

unshare=0
keepresolvconf=0
# termux-arch-chroot
log_level=0
unshare_level=1
mount_android=0
mount_host=0
mount_safely=0
bind_mounts=()
rbind_mounts=()
fstab_files=()
fstab_mounts=""
later_mounts=()

m4_include(common)

usage() {
  cat <<EOF
usage: ${0##*/} chroot-dir [command] [arguments...]

    -h                  Print this help message
    -N                  Run in unshare mode as a regular user
    -u <user>[:group]   Specify non-root user and optional group to use
    -r                  Do not change the resolv.conf within the chroot
    -b <src>[:dest:opts]Make the content of <src> accessible in the guest rootfs
    -v <src>[:dest:opts]Same as -b, but with mount -o rbind (like docker run)
    -A                  A couple of recommended -b (Mount Android like proot-distro)
    -R                  A couple of recommended -b (Mount host files like proot -R)
    -S                  A couple of recommended -b (Mount host files like proot -S)
    -f <src>            Make the content of <src> accessible like /etc/fstab.
    -l                  Output log with date, hostname, pid to stdout
    -n <num>            Specify unshare level: 0~7,it can be seen as a binary number:
        0 (000)         No unshare. (chroot_setup)
        1 (001)         Enable pid_unshare. (unshare --pid)
        2 (010)         Enable mount_unshare. (unshare --mount)
        4 (100)         Enable unshare_setup.

If 'command' is unspecified, ${0##*/} will launch /bin/bash.

Note that when using arch-chroot, the target chroot directory *should* be a
mountpoint. This ensures that tools such as pacman(8) or findmnt(8) have an
accurate hierarchy of the mounted filesystems within the chroot.

If your chroot target is not a mountpoint, this script will mount --bind it
to make it one, or remount it by \$chrootdir/etc/fstab.

EOF
}

resolve_link() {
  local target=$1
  local root=$2

  # If a root was given, make sure it ends in a slash.
  [[ -n $root && $root != */ ]] && root=$root/

  while [[ -L $target ]]; do
    target=$(readlink -m "$target")
    # If a root was given, make sure the target is under it.
    # Make sure to strip any leading slash from target first.
    [[ -n $root && $target != $root* ]] && target=$root${target#/}
  done

  printf %s "$target"
}

chroot_add_resolv_conf() {
  local chrootdir=$1
  local src
  local dest="$chrootdir/etc/resolv.conf"

  src=$(resolve_link /etc/resolv.conf)

  # If we don't have a source resolv.conf file, there's nothing useful we can do.
  [[ -e $src ]] || return 0

  if [[ ! -e "$dest" && ! -h "$dest" ]]; then
    # There may be no resolv.conf in the chroot. In this case, we'll just exit.
    # The chroot environment must not be concerned with DNS resolution.
    return 0
  fi

  chroot_add_mount "$src" "$dest" -c --bind
}

arch-chroot() {
  (( EUID == 0 )) || die 'This script must be run with root privileges'

  [[ -d $chrootdir ]] || die "Can't create chroot on non-directory %s" "$chrootdir"

  (( log_level == 0 )) && eval "log_msg() { :; }"

  $setup "$chrootdir" || die "failed to setup chroot %s" "$chrootdir"
  if (( ! keepresolvconf )); then
    chroot_add_resolv_conf "$chrootdir" || die "failed to setup resolv.conf"
  fi

  chroot_args=()
  [[ $userspec ]] && chroot_args+=(--userspec "$userspec")

  unset LD_PRELOAD
  SHELL=/bin/bash $pid_unshare chroot "${chroot_args[@]}" -- "$chrootdir" "${args[@]}"
}

while getopts ':hNu:rb:v:ARSFf:n:l' flag; do
  case $flag in
    h)
      usage
      exit 0
      ;;
    N)
      unshare=1
      ;;
    u)
      userspec=$OPTARG
      ;;
    r)
      keepresolvconf=1
      ;;
    b)
      bind_mounts+=("$OPTARG")
      ;;
    v)
      rbind_mounts+=("$OPTARG")
      ;;
    A)
      mount_android=1
      ;;
    R)
      mount_host=1
      ;;
    S)
      mount_safely=1
      ;;
    f)
      fstab_files+=("$OPTARG")
      ;;
    n)
      unshare_level=$OPTARG
      ;;
    l)
      log_level=1
      ;;
    :)
      die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
    ?)
      die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

(( $# )) || die 'No chroot directory specified'
chrootdir=$1
shift

args=("$@")
if (( unshare )); then
  # 001 pid_unshare
  if (( ! unshare_level & 1 )); then
    unset pid_unshare
  fi
  # 010 mount_unshare
  if (( ! unshare_level & 2 )); then
    unset mount_unshare
  fi
  # 100 unshare_setup
  if (( ! unshare_level & 4 )); then
    setup=chroot_setup
  else
    setup=unshare_setup
  fi
  $mount_unshare bash -c "$(declare_all); arch-chroot"
else
  setup=chroot_setup
  arch-chroot
fi
